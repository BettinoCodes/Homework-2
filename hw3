import csv


class Woodinfo_node:

  def __init__(self, woodtype, quantity, price):
    self.woodtype = woodtype
    self.quantity = quantity
    self.price = price
    self.next = None


class Woods_linkedlist:

  def __init__(self):
    self.head = None

  def add_node(self, woodtype, quantity, price):
    new_node = Woodinfo_node(woodtype, quantity, price)
    if self.head is None:
      self.head = new_node
    else:
      current = self.head
      while current.next is not None:
        current = current.next
      current.next = new_node

  def display_list(self):
    current = self.head
    while current is not None:
      print(
          f"Wood Type: {current.woodtype}, Quantity: {current.quantity}, Price: {current.price}"
      )
      current = current.next

  def search_node(self, woodtype):
    current = self.head
    while current is not None:
      if current.woodtype == woodtype:
        return current
      current = current.next
    return None

  def remove_head(self):
    if self.head is None:
      return
    self.head = self.head.next

  def delete_node(self, woodtype):
    current = self.head
    previous = None
    while current is not None:
      if current.woodtype == woodtype:
        if previous is None:
          self.head = current.next
        else:
          previous.next = current.next
        return
      previous = current
      current = current.next
      
  def total_quantity(self):
    total = 0
    current = self.head
    while current is not None:
      total += current.quantity
      current = current.next
    return total


def process_sale(wood_list, wood_type, quantity_to_sell, promotion):
  quantity_remaining = quantity_to_sell

  while wood_list.head and quantity_remaining > 0:
    current_node = wood_list.head

    if current_node.quantity >= quantity_remaining:
      # Enough stock in this node; fulfill sale and reduce quantity
      print(
          f"Selling {quantity_remaining} units of {wood_type} at ${current_node.price * (1 + (promotion/100))}"
      )
      current_node.quantity -= quantity_remaining
      quantity_remaining = 0
    else:
      # Not enough stock in this node; sell remaining stock and move to next node
      print(
          f"Selling {current_node.quantity} units of {wood_type} at ${current_node.price * (1 + (promotion/100))}"
      )
      quantity_remaining -= current_node.quantity
      wood_list.remove_head()

  if quantity_remaining > 0:
    print(
        f"Insufficient stock for {wood_type}. {quantity_remaining} units remain unsold."
    )


cherry_woodstock = Woods_linkedlist()
oak_woodstock = Woods_linkedlist()

# R,C
# S,O
# R,O
# S,C


def convert_dollars(price):
  return float(price[1:-1])


with open('data.csv', 'r') as csvfile:
  # Create a reader object
  csv_reader = csv.reader(csvfile)
  current_promotion = 0
  # Iterate through the rows in the CSV file
  for row in csv_reader:
    if row[0] == 'R' and row[1] == "C":
      money = convert_dollars(row[3])
      quant = int(row[2])
      cherry_woodstock.add_node(row[1], quant, money)
      print(f"Received {quant} units of Cherry Wood at ${money}")

    elif row[0] == 'R' and row[1] == "O":
      money = convert_dollars(row[3])
      quant = int(row[2])
      oak_woodstock.add_node(row[1], quant, money)
      print(f"Received {quant} units of Oak wood at ${money}")

    elif row[0] == 'S' and row[1] == "O":
      quant = int(row[2])
      total_wood_to_sell = oak_woodstock.total_quantity()
      print(f"We have {total_wood_to_sell} units of Oak wood in stock")
      process_sale(oak_woodstock, row[1], quant, current_promotion)

    elif row[0] == 'S' and row[1] == "C":
      quant = int(row[2])
      total_wood_to_sell = cherry_woodstock.total_quantity()
      print(f"We have {total_wood_to_sell} units of cherry wood in stock")
      process_sale(cherry_woodstock, row[1], quant, current_promotion)

    elif row[0] == 'P':
      current_promotion = int(row[2][0:2])
      print("Promotion: ", current_promotion)

# Display the linked lists
# print("Cherry Woodstock:")
# cherry_woodstock.display_list()
# print("\nOak Woodstock:")
# oak_woodstock.display_list()
